#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_1 = __importDefault(require("colors/safe"));
const command_line_args_1 = __importDefault(require("command-line-args"));
const command_line_usage_1 = __importDefault(require("command-line-usage"));
const dotenv_1 = __importDefault(require("dotenv"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fetch_1 = require("./fetch");
dotenv_1.default.config();
const optionDefinitions = [
    {
        name: "help",
        alias: "h",
        type: Boolean,
        description: "Display this usage guide.",
    },
    {
        name: "contract",
        type: String,
        multiple: true,
        description: "The addresses of contract to fetch ABIs of.",
        typeLabel: "<address>",
        defaultOption: true,
        defaultValue: [],
    },
    {
        name: "target",
        alias: "t",
        type: String,
        description: "The path to the directory inside which to save ABIs.",
        typeLabel: "<path>",
        defaultValue: "abis",
    },
    {
        name: "network",
        alias: "n",
        type: String,
        description: "The network on which to fetch ABIs.",
        typeLabel: "<network>",
        defaultValue: "mainnet",
    },
    {
        name: "apiKey",
        alias: "k",
        type: String,
        description: "The Etherscan API Key to use to fetch ABIs.",
        typeLabel: "<string>",
        defaultValue: undefined,
    },
    {
        name: "rpcUrl",
        alias: "r",
        type: String,
        description: "The RPC URL to use to query for implementation address (only used in case of proxies).",
        typeLabel: "<url>",
        defaultValue: undefined,
    },
];
const options = (0, command_line_args_1.default)(optionDefinitions);
const help = (0, command_line_usage_1.default)([
    {
        header: "Etherscan ABI Fetcher",
        content: "⏬🚀 Fetch the most up-to-date ABI of a verified Smart Contract from Etherscan in seconds!",
    },
    {
        header: "Options",
        optionList: optionDefinitions,
    },
    {
        content: "Project home: {underline https://github.com/rubilmax/etherscan-abi}",
    },
]);
const fetchAbis = () => {
    const { contract, target } = options, fetchConfig = __rest(options, ["contract", "target"]);
    if (contract.length === 0) {
        console.error(safe_1.default.red("No contract address specified."));
        return console.log(help);
    }
    if (!fs_1.default.existsSync(target))
        fs_1.default.mkdirSync(target, { recursive: true });
    return Promise.all(contract.map((address) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const { name, abi } = yield (0, fetch_1.fetchAbiAt)(address, fetchConfig);
            const targetPath = path_1.default.join(target, `${name}.json`);
            fs_1.default.writeFileSync(targetPath, JSON.stringify(abi, null, 2));
            console.log(safe_1.default.green(`Successfully saved ABI for ${safe_1.default.bold(address)} at ${safe_1.default.bold(targetPath)}`));
        }
        catch (error) {
            console.log(safe_1.default.red(`Error while fetching ABI for ${safe_1.default.bold(address)}: ${safe_1.default.bold(error.message)}`));
        }
    })));
};
if (options.help)
    console.log(help);
else
    void fetchAbis();
